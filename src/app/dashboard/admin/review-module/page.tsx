"use client";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { useToast } from "@/hooks/use-toast";
import type { GeneratedQuestion } from "@/types";
import { CheckCircle, ListChecks, ThumbsDown, ThumbsUp, XCircle, Edit3, Eye } from "lucide-react";
import React, { useState } from "react";
import { Badge } from "@/components/ui/badge";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";

const mockQuestions: GeneratedQuestion[] = [
  { id: 'q1', questionText: "What is the company's core mission regarding customer satisfaction?", topic: "Company Values", status: 'pending', createdBy: 'ai', createdAt: new Date(), options: ["Exceed expectations", "Meet expectations", "Ignore feedback"], correctAnswer: "Exceed expectations" },
  { id: 'q2', questionText: "Which department handles IT support requests?", topic: "Operations", status: 'approved', createdBy: 'ai', createdAt: new Date(Date.now() - 86400000), options: ["HR", "IT Support", "Finance"], correctAnswer: "IT Support" },
  { id: 'q3', questionText: "What is the first step in the new project kickoff process?", topic: "Project Management", status: 'pending', createdBy: 'ai', createdAt: new Date(), options: ["Client meeting", "Team briefing", "Requirement gathering", "Budget approval"], correctAnswer: "Requirement gathering" },
  { id: 'q4', questionText: "How often are performance reviews conducted?", topic: "HR Policies", status: 'rejected', createdBy: 'ai', createdAt: new Date(Date.now() - 172800000), options: ["Annually", "Bi-annually", "Quarterly"], correctAnswer: "Bi-annually" },
  { id: 'q5', questionText: "What is the primary tool for internal communication?", topic: "Tools & Software", status: 'pending', createdBy: 'ai', createdAt: new Date(), options: ["Email", "Slack", "Microsoft Teams", "Phone calls"], correctAnswer: "Slack" },
];


export default function ReviewModulePage() {
  const [questions, setQuestions] = useState<GeneratedQuestion[]>(mockQuestions);
  const [editingQuestion, setEditingQuestion] = useState<GeneratedQuestion | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { toast } = useToast();

  const handleStatusChange = (id: string, status: 'approved' | 'rejected') => {
    setQuestions(prev => prev.map(q => q.id === id ? { ...q, status } : q));
    toast({ title: "Status Updated", description: `Question ${status} successfully.` });
  };

  const handleEdit = (question: GeneratedQuestion) => {
    setEditingQuestion({...question}); // Create a copy for editing
    setIsModalOpen(true);
  };

  const handleSaveEdit = () => {
    if (editingQuestion) {
      setQuestions(prev => prev.map(q => q.id === editingQuestion.id ? editingQuestion : q));
      toast({ title: "Question Updated", description: "Changes saved successfully."});
      setIsModalOpen(false);
      setEditingQuestion(null);
    }
  };

  const handleEditModalChange = (field: keyof GeneratedQuestion, value: string | string[]) => {
    if(editingQuestion) {
      if (field === 'options' && Array.isArray(value)) {
         setEditingQuestion(prev => prev ? {...prev, [field]: value} : null);
      } else if (typeof value === 'string') {
         setEditingQuestion(prev => prev ? {...prev, [field]: value} : null);
      }
    }
  }

  return (
    <div className="space-y-6">
      <Card className="shadow-xl">
        <CardHeader>
          <CardTitle className="flex items-center gap-2 text-2xl">
            <ListChecks className="h-7 w-7 text-primary" /> Review AI-Generated Questions
          </CardTitle>
          <CardDescription>
            Review, edit, approve, or reject questions generated by the AI to ensure quality and relevance.
          </CardDescription>
        </CardHeader>
        <CardContent>
          {questions.length === 0 ? (
            <p className="text-muted-foreground text-center py-4">No questions to review currently.</p>
          ) : (
          <ScrollArea className="max-h-[600px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead className="w-[40%]">Question</TableHead>
                  <TableHead>Topic</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="text-right">Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {questions.map((question) => (
                  <TableRow key={question.id} className={question.status === 'pending' ? 'bg-accent/10' : ''}>
                    <TableCell className="font-medium text-sm py-3">
                      {question.questionText}
                      {question.options && (
                        <ul className="list-disc list-inside text-xs text-muted-foreground mt-1 pl-2">
                          {question.options.map((opt, i) => <li key={i}>{opt} {opt === question.correctAnswer && <CheckCircle className="inline h-3 w-3 text-green-500 ml-1"/>}</li>)}
                        </ul>
                      )}
                    </TableCell>
                    <TableCell className="text-xs">{question.topic}</TableCell>
                    <TableCell>
                      <Badge variant={
                        question.status === 'approved' ? 'default' :
                        question.status === 'rejected' ? 'destructive' :
                        'secondary'
                      } className="capitalize text-xs whitespace-nowrap">
                        {question.status === 'approved' && <CheckCircle className="mr-1 h-3 w-3" />}
                        {question.status === 'rejected' && <XCircle className="mr-1 h-3 w-3" />}
                        {question.status}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right space-x-1 py-2">
                      <Button variant="ghost" size="icon" onClick={() => handleEdit(question)} title="Edit/View">
                        <Edit3 className="h-4 w-4 text-blue-600" />
                      </Button>
                      {question.status !== 'approved' && (
                        <Button variant="ghost" size="icon" onClick={() => handleStatusChange(question.id, 'approved')} title="Approve">
                          <ThumbsUp className="h-4 w-4 text-green-600" />
                        </Button>
                      )}
                      {question.status !== 'rejected' && (
                        <Button variant="ghost" size="icon" onClick={() => handleStatusChange(question.id, 'rejected')} title="Reject">
                          <ThumbsDown className="h-4 w-4 text-red-600" />
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </ScrollArea>
          )}
        </CardContent>
      </Card>

      {editingQuestion && (
        <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
          <DialogContent className="sm:max-w-2xl">
            <DialogHeader>
              <DialogTitle>Edit Question</DialogTitle>
              <DialogDescription>
                Make changes to the question text, options, or correct answer.
              </DialogDescription>
            </DialogHeader>
            <ScrollArea className="max-h-[60vh] p-1">
            <div className="grid gap-4 py-4">
              <div className="space-y-2">
                <Label htmlFor="questionText">Question Text</Label>
                <Textarea id="questionText" value={editingQuestion.questionText} onChange={(e) => handleEditModalChange('questionText', e.target.value)} className="min-h-[100px]" />
              </div>
              {editingQuestion.options && editingQuestion.options.map((option, index) => (
                <div key={index} className="space-y-2">
                  <Label htmlFor={`option-${index}`}>Option {index + 1}</Label>
                  <Input id={`option-${index}`} value={option} onChange={(e) => {
                      const newOptions = [...(editingQuestion.options || [])];
                      newOptions[index] = e.target.value;
                      handleEditModalChange('options', newOptions);
                  }}/>
                </div>
              ))}
              <div className="space-y-2">
                <Label htmlFor="correctAnswer">Correct Answer</Label>
                <Input id="correctAnswer" value={editingQuestion.correctAnswer || ''} onChange={(e) => handleEditModalChange('correctAnswer', e.target.value)} />
              </div>
               <div className="space-y-2">
                <Label htmlFor="topic">Topic</Label>
                <Input id="topic" value={editingQuestion.topic} onChange={(e) => handleEditModalChange('topic', e.target.value)} />
              </div>
            </div>
            </ScrollArea>
            <DialogFooter>
              <Button type="button" variant="outline" onClick={() => setIsModalOpen(false)}>Cancel</Button>
              <Button type="button" onClick={handleSaveEdit}>Save Changes</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
}
